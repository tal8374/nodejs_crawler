#!/usr/bin/env node

const cluster = require('cluster');
const crawlerService = require('../services/crawler.service');

if (cluster.isMaster) {
    const cpuCount = require('os').cpus().length;

    for (let i = 0; i < cpuCount; i += 1) {
        cluster.fork();
    }

    cluster.on('exit', function () {
        cluster.fork();
    });
} else {
    const app = require('../app');
    const debug = require('debug')('reflectiz:server');
    const http = require('http');

    const port = normalizePort(process.env.PORT || '3002');
    const server = http.createServer(app);

    console.log("worker with id " + cluster.worker.id + " is listening on port " + port);
    app.listen(3002, function() {
        if(cluster.worker.id % require('os').cpus().length === 0) {
            crawlerService.initCrawl();
        }
    });

    server.on('error', onError);
    server.on('listening', onListening);

}

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

